/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/  

#version 330 core

layout(location = 0) in vec3 in_position;
layout(location = 1) in vec3 in_normal;

uniform mat4 normalMatrix;
uniform mat4 viewModelMatrix;
uniform mat4 projectionMatrix;

uniform vec4 shadeColor;

out vec4 color;


vec3 FlashLightShading(vec3 normal, vec3 posit)
{
	vec3 lightDir = -normalize (posit);
	vec3 diffuseCoeff = vec3(1.0f, 1.0f, 1.0f);  
	return vec3(0.4f, 0.4f, 0.4f) + diffuseCoeff * max (dot(normal, lightDir), 0.0);
}

void main()
{	
	vec3 normal = normalize (vec3 (normalize (normalMatrix * vec4(in_normal, 0.0))));
	vec3 posit = vec3 (viewModelMatrix * vec4(in_position, 1.0));
	
	vec3 lightIntensity = FlashLightShading(normal, posit);

	color = vec4 (lightIntensity, 1.0f) * shadeColor;
	gl_Position = projectionMatrix * vec4(posit, 1.0);
}