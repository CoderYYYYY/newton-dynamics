/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/  
   
#version 330 core

uniform sampler2D texture;

in vec2 uv;
in vec3 posit;
in vec3 normal;
in vec3 lightDir;

out vec4 pixelColor;

vec3 PhongDirectionalShading(vec3 normalDir)
{
	vec3 specularDir = normalize (-posit);
	
	vec3 reflectionDir = -reflect (lightDir, normalDir);
	
	//vec3 ambientCoeff = vec3(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
	//vec3 diffuseCoeff = vec3(gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse); 
	//vec3 specularCoeff = vec3(gl_LightSource[0].specular * gl_FrontMaterial.specular);
	
	vec3 ambientCoeff = vec3(0.1f, 0.1f, 0.1f);
	vec3 diffuseCoeff = vec3(0.9f, 0.9f, 0.9f); 
	vec3 specularCoeff = vec3(0.8f, 0.8f, 0.8f);
	vec3 emission = vec3(0.0f, 0.0f, 0.0f);
	float shininess = 20.0f;
	
	vec3 ambientColor = ambientCoeff + emission; 
	vec3 diffuseColor = diffuseCoeff * max (dot(normalDir, lightDir), 0.0f);
	vec3 specularColor = specularCoeff * pow (max (dot (reflectionDir, specularDir), 0.1), shininess);
	
	return ambientColor + diffuseColor + specularColor;
}


void main()
{
	vec3 normalDir = normalize (normal);

	//vec3 lightIntensity = PhongDirectionalShading() + GouraudPointLightShading(1);
	vec3 lightIntensity = PhongDirectionalShading(normalDir);

	vec3 texColor = lightIntensity * vec3 (texture2D(texture, uv));
	pixelColor = vec4(texColor, 1.0f);
}