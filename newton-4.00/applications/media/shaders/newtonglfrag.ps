/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/  
   
#version 460 core

//layout(binding = 0) uniform sampler2D sColorMap;
//layout(location = 0) out vec4 out_color;
//uniform int usetexture;
//in VS_FS_INTERFACE
//{
//    vec4 world_coord;
//    vec3 v_coord;
//    vec3 eye_coord;
//    vec3 normal_coord;
//    vec3 normals;
//	//vec4 colors;
//	vec2 texture;
//} fragment;

uniform sampler2D texture;

//varying vec3 normal;
//varying vec3 position;

in vec2 uv;
in vec3 posit;
in vec3 normal;

//vec3 PhongDirectionalShading()
//{
//	//vec3 norm = normalize (normal);
//	vec3 lighDir = normalize (gl_LightSource[0].position.xyz);
//	vec3 specularDir = normalize (-position);
//	vec3 refectionDir = -reflect (lighDir, normal);
//
//	vec3 ambientCoeff = vec3(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
//	vec3 diffuseCoeff = vec3(gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse); 
//	vec3 specularCoeff = vec3(gl_LightSource[0].specular * gl_FrontMaterial.specular);
//
//	vec3 ambientColor = ambientCoeff + vec3(gl_FrontMaterial.emission); 
//	vec3 diffuseColor = diffuseCoeff * max (dot(norm, lighDir), 0.0);
//	vec3 specularColor = specularCoeff * pow (max (dot (refectionDir, specularDir), 0.1), gl_FrontMaterial.shininess);
//
//	//return vec3 (specularColor);
//	return vec3 (ambientColor + diffuseColor + specularColor);
//}


void main()
{
	////vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
	////value = texture2D(sColorMap, fragment.texture); 
	////out_color = value; 
	//
	//vec3 texColor = vec3 (texture2D(texture, uv));
	//
	////vec3 lightIntensity = PhongDirectionalShading();
	////vec3 lightIntensity = PhongDirectionalShading() + GouraudPointLightShading(1);
	////vec3 color = texColor * lightIntensity;
	//vec3 color = texColor;
	////float opacity = gl_FrontMaterial.diffuse.w;
	//float opacity = 1.0;
	//gl_FragColor = vec4 (color, opacity);

	vec3 texColor = vec3 (texture2D(texture, uv));
	gl_FragColor = vec4(texColor, 1.0f);
}