/* Copyright (c) <2003-2016> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/  

#version 460 core

layout(location = 0) in vec3 in_position;
layout(location = 1) in vec2 in_uv;
layout(location = 2) in vec3 in_normal;
//layout(location = 3) in vec4 in_color;

uniform vec4 color;

uniform mat4 Projection_Matrix, View_Matrix, Model_Matrix;

out VS_FS_INTERFACE
{
    vec4 world_coord;
    vec3 v_coord;
    vec3 eye_coord;
    vec3 normal_coord;
    vec3 normals;
	vec4 colors;
	vec2 texture;
} vertex;

void main()
{	
    vec4 world_pos = Model_Matrix * vec4(in_position, 1.0);
    vec4 eye_pos = View_Matrix * world_pos;
    vec4 clip_pos = Projection_Matrix * eye_pos;
    mat4 modelView = View_Matrix * Model_Matrix;	
	
	gl_Position = clip_pos;
	
	vec3 aeyeNorm = normalize(inverse(mat3(Model_Matrix)) * in_normal);

    vertex.v_coord = eye_pos.xyz;
    vertex.world_coord = world_pos;	
	
    vertex.eye_coord = -vertex.v_coord;
    vertex.normals = mat3(Model_Matrix) * in_normal;
    vertex.normal_coord = aeyeNorm;
    vertex.colors = color;	
    vertex.texture = in_uv;		
}